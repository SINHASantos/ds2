(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl&lt;S:&nbsp;Clone + StateID&gt; Clone for AhoCorasick&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for AhoCorasickBuilder","synthetic":false,"types":[]},{"text":"impl Clone for MatchKind","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for MatchKind","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for Searcher","synthetic":false,"types":[]},{"text":"impl Clone for Match","synthetic":false,"types":[]}];
implementors["ansi_term"] = [{"text":"impl Clone for Prefix","synthetic":false,"types":[]},{"text":"impl Clone for Infix","synthetic":false,"types":[]},{"text":"impl Clone for Suffix","synthetic":false,"types":[]},{"text":"impl Clone for Style","synthetic":false,"types":[]},{"text":"impl Clone for Colour","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;'a + ToOwned + ?Sized&gt; Clone for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Debug,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; Clone for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Array&lt;Item = u8&gt; + Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for CapacityError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Clone for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Clone for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["atty"] = [{"text":"impl Clone for Stream","synthetic":false,"types":[]}];
implementors["clap"] = [{"text":"impl Clone for AppSettings","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Clone for App&lt;'a, 'b&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Clone for Arg&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ArgMatches&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Values&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for OsValues&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ArgGroup&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ArgSettings","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SubCommand&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Shell","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]}];
implementors["config"] = [{"text":"impl Clone for Config","synthetic":false,"types":[]},{"text":"impl Clone for Environment","synthetic":false,"types":[]},{"text":"impl Clone for FileFormat","synthetic":false,"types":[]},{"text":"impl Clone for FileSourceFile","synthetic":false,"types":[]},{"text":"impl Clone for FileSourceString","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for File&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FileSource,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Box&lt;dyn Source + Send + Sync&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]}];
implementors["filetime"] = [{"text":"impl Clone for FileTime","synthetic":false,"types":[]}];
implementors["fixedbitset"] = [{"text":"impl Clone for FixedBitSet","synthetic":false,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;T&gt; Clone for Bucket&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for RawTable&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for RawIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Iter&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Keys&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Values&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashSet&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, '_&gt; Clone for Iter&lt;'_, K&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Intersection&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Difference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for SymmetricDifference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Union&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for TryReserveError","synthetic":false,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;K, V, S&gt; Clone for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Keys&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Values&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Iter&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; Clone for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, '_&gt; Clone for Iter&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Difference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Intersection&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S1, S2, '_&gt; Clone for SymmetricDifference&lt;'_, T, S1, S2&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Union&lt;'_, T, S&gt;","synthetic":false,"types":[]}];
implementors["ini"] = [{"text":"impl Clone for EscapePolicy","synthetic":false,"types":[]},{"text":"impl Clone for Ini","synthetic":false,"types":[]}];
implementors["inotify"] = [{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Event&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for EventMask","synthetic":false,"types":[]},{"text":"impl Clone for WatchMask","synthetic":false,"types":[]},{"text":"impl Clone for WatchDescriptor","synthetic":false,"types":[]}];
implementors["inotify_sys"] = [{"text":"impl Clone for inotify_event","synthetic":false,"types":[]}];
implementors["itoa"] = [{"text":"impl Clone for Buffer","synthetic":false,"types":[]}];
implementors["lazycell"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for LazyCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for AtomicLazyCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["lexical_core"] = [{"text":"impl Clone for ErrorCode","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["libc"] = [{"text":"impl Clone for DIR","synthetic":false,"types":[]},{"text":"impl Clone for group","synthetic":false,"types":[]},{"text":"impl Clone for utimbuf","synthetic":false,"types":[]},{"text":"impl Clone for timeval","synthetic":false,"types":[]},{"text":"impl Clone for timespec","synthetic":false,"types":[]},{"text":"impl Clone for rlimit","synthetic":false,"types":[]},{"text":"impl Clone for rusage","synthetic":false,"types":[]},{"text":"impl Clone for ipv6_mreq","synthetic":false,"types":[]},{"text":"impl Clone for hostent","synthetic":false,"types":[]},{"text":"impl Clone for iovec","synthetic":false,"types":[]},{"text":"impl Clone for pollfd","synthetic":false,"types":[]},{"text":"impl Clone for winsize","synthetic":false,"types":[]},{"text":"impl Clone for linger","synthetic":false,"types":[]},{"text":"impl Clone for sigval","synthetic":false,"types":[]},{"text":"impl Clone for itimerval","synthetic":false,"types":[]},{"text":"impl Clone for tms","synthetic":false,"types":[]},{"text":"impl Clone for servent","synthetic":false,"types":[]},{"text":"impl Clone for protoent","synthetic":false,"types":[]},{"text":"impl Clone for FILE","synthetic":false,"types":[]},{"text":"impl Clone for fpos_t","synthetic":false,"types":[]},{"text":"impl Clone for timezone","synthetic":false,"types":[]},{"text":"impl Clone for in_addr","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq_source","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in6","synthetic":false,"types":[]},{"text":"impl Clone for addrinfo","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_ll","synthetic":false,"types":[]},{"text":"impl Clone for fd_set","synthetic":false,"types":[]},{"text":"impl Clone for tm","synthetic":false,"types":[]},{"text":"impl Clone for sched_param","synthetic":false,"types":[]},{"text":"impl Clone for Dl_info","synthetic":false,"types":[]},{"text":"impl Clone for lconv","synthetic":false,"types":[]},{"text":"impl Clone for in_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for ifaddrs","synthetic":false,"types":[]},{"text":"impl Clone for in6_rtmsg","synthetic":false,"types":[]},{"text":"impl Clone for arpreq","synthetic":false,"types":[]},{"text":"impl Clone for arpreq_old","synthetic":false,"types":[]},{"text":"impl Clone for arphdr","synthetic":false,"types":[]},{"text":"impl Clone for mmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for epoll_event","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_un","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_storage","synthetic":false,"types":[]},{"text":"impl Clone for utsname","synthetic":false,"types":[]},{"text":"impl Clone for sigevent","synthetic":false,"types":[]},{"text":"impl Clone for fpos64_t","synthetic":false,"types":[]},{"text":"impl Clone for rlimit64","synthetic":false,"types":[]},{"text":"impl Clone for glob_t","synthetic":false,"types":[]},{"text":"impl Clone for passwd","synthetic":false,"types":[]},{"text":"impl Clone for spwd","synthetic":false,"types":[]},{"text":"impl Clone for dqblk","synthetic":false,"types":[]},{"text":"impl Clone for signalfd_siginfo","synthetic":false,"types":[]},{"text":"impl Clone for itimerspec","synthetic":false,"types":[]},{"text":"impl Clone for fsid_t","synthetic":false,"types":[]},{"text":"impl Clone for packet_mreq","synthetic":false,"types":[]},{"text":"impl Clone for cpu_set_t","synthetic":false,"types":[]},{"text":"impl Clone for if_nameindex","synthetic":false,"types":[]},{"text":"impl Clone for msginfo","synthetic":false,"types":[]},{"text":"impl Clone for sembuf","synthetic":false,"types":[]},{"text":"impl Clone for input_event","synthetic":false,"types":[]},{"text":"impl Clone for input_id","synthetic":false,"types":[]},{"text":"impl Clone for input_absinfo","synthetic":false,"types":[]},{"text":"impl Clone for input_keymap_entry","synthetic":false,"types":[]},{"text":"impl Clone for input_mask","synthetic":false,"types":[]},{"text":"impl Clone for ff_replay","synthetic":false,"types":[]},{"text":"impl Clone for ff_trigger","synthetic":false,"types":[]},{"text":"impl Clone for ff_envelope","synthetic":false,"types":[]},{"text":"impl Clone for ff_constant_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_ramp_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_condition_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_periodic_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_rumble_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_effect","synthetic":false,"types":[]},{"text":"impl Clone for dl_phdr_info","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Ehdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Ehdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Sym","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Sym","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Phdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Phdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Shdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Shdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Chdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Chdr","synthetic":false,"types":[]},{"text":"impl Clone for ucred","synthetic":false,"types":[]},{"text":"impl Clone for mntent","synthetic":false,"types":[]},{"text":"impl Clone for posix_spawn_file_actions_t","synthetic":false,"types":[]},{"text":"impl Clone for posix_spawnattr_t","synthetic":false,"types":[]},{"text":"impl Clone for genlmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for in6_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for arpd_request","synthetic":false,"types":[]},{"text":"impl Clone for inotify_event","synthetic":false,"types":[]},{"text":"impl Clone for fanotify_response","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_vm","synthetic":false,"types":[]},{"text":"impl Clone for regmatch_t","synthetic":false,"types":[]},{"text":"impl Clone for sock_extended_err","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_nl","synthetic":false,"types":[]},{"text":"impl Clone for dirent","synthetic":false,"types":[]},{"text":"impl Clone for dirent64","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_alg","synthetic":false,"types":[]},{"text":"impl Clone for af_alg_iv","synthetic":false,"types":[]},{"text":"impl Clone for mq_attr","synthetic":false,"types":[]},{"text":"impl Clone for statx","synthetic":false,"types":[]},{"text":"impl Clone for statx_timestamp","synthetic":false,"types":[]},{"text":"impl Clone for aiocb","synthetic":false,"types":[]},{"text":"impl Clone for __exit_status","synthetic":false,"types":[]},{"text":"impl Clone for __timeval","synthetic":false,"types":[]},{"text":"impl Clone for glob64_t","synthetic":false,"types":[]},{"text":"impl Clone for msghdr","synthetic":false,"types":[]},{"text":"impl Clone for cmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for termios","synthetic":false,"types":[]},{"text":"impl Clone for mallinfo","synthetic":false,"types":[]},{"text":"impl Clone for nlmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for nlmsgerr","synthetic":false,"types":[]},{"text":"impl Clone for nl_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for nl_mmap_req","synthetic":false,"types":[]},{"text":"impl Clone for nl_mmap_hdr","synthetic":false,"types":[]},{"text":"impl Clone for nlattr","synthetic":false,"types":[]},{"text":"impl Clone for rtentry","synthetic":false,"types":[]},{"text":"impl Clone for timex","synthetic":false,"types":[]},{"text":"impl Clone for ntptimeval","synthetic":false,"types":[]},{"text":"impl Clone for regex_t","synthetic":false,"types":[]},{"text":"impl Clone for utmpx","synthetic":false,"types":[]},{"text":"impl Clone for sigset_t","synthetic":false,"types":[]},{"text":"impl Clone for sysinfo","synthetic":false,"types":[]},{"text":"impl Clone for msqid_ds","synthetic":false,"types":[]},{"text":"impl Clone for sigaction","synthetic":false,"types":[]},{"text":"impl Clone for statfs","synthetic":false,"types":[]},{"text":"impl Clone for flock","synthetic":false,"types":[]},{"text":"impl Clone for flock64","synthetic":false,"types":[]},{"text":"impl Clone for siginfo_t","synthetic":false,"types":[]},{"text":"impl Clone for stack_t","synthetic":false,"types":[]},{"text":"impl Clone for stat","synthetic":false,"types":[]},{"text":"impl Clone for stat64","synthetic":false,"types":[]},{"text":"impl Clone for statfs64","synthetic":false,"types":[]},{"text":"impl Clone for statvfs64","synthetic":false,"types":[]},{"text":"impl Clone for pthread_attr_t","synthetic":false,"types":[]},{"text":"impl Clone for _libc_fpxreg","synthetic":false,"types":[]},{"text":"impl Clone for _libc_xmmreg","synthetic":false,"types":[]},{"text":"impl Clone for _libc_fpstate","synthetic":false,"types":[]},{"text":"impl Clone for user_regs_struct","synthetic":false,"types":[]},{"text":"impl Clone for user","synthetic":false,"types":[]},{"text":"impl Clone for mcontext_t","synthetic":false,"types":[]},{"text":"impl Clone for ipc_perm","synthetic":false,"types":[]},{"text":"impl Clone for shmid_ds","synthetic":false,"types":[]},{"text":"impl Clone for termios2","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreqn","synthetic":false,"types":[]},{"text":"impl Clone for user_fpregs_struct","synthetic":false,"types":[]},{"text":"impl Clone for ucontext_t","synthetic":false,"types":[]},{"text":"impl Clone for statvfs","synthetic":false,"types":[]},{"text":"impl Clone for max_align_t","synthetic":false,"types":[]},{"text":"impl Clone for sem_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutexattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlockattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_condattr_t","synthetic":false,"types":[]},{"text":"impl Clone for fanotify_event_metadata","synthetic":false,"types":[]},{"text":"impl Clone for pthread_cond_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutex_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlock_t","synthetic":false,"types":[]},{"text":"impl Clone for in6_addr","synthetic":false,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;K:&nbsp;Hash + Eq + Clone, V:&nbsp;Clone, S:&nbsp;BuildHasher + Clone&gt; Clone for LinkedHashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Clone for Iter&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Clone for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Clone for Keys&lt;'a, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Clone for Values&lt;'a, K, V&gt;","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Clone for Level","synthetic":false,"types":[]},{"text":"impl Clone for LevelFilter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Metadata&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["mio"] = [{"text":"impl Clone for PollOpt","synthetic":false,"types":[]},{"text":"impl Clone for Ready","synthetic":false,"types":[]},{"text":"impl Clone for Event","synthetic":false,"types":[]},{"text":"impl Clone for SetReadiness","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Iter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UnixReady","synthetic":false,"types":[]},{"text":"impl Clone for Token","synthetic":false,"types":[]}];
implementors["mio_extras"] = [{"text":"impl&lt;T&gt; Clone for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for SyncSender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Timeout","synthetic":false,"types":[]}];
implementors["notify"] = [{"text":"impl Clone for Op","synthetic":false,"types":[]},{"text":"impl Clone for RecursiveMode","synthetic":false,"types":[]}];
implementors["petgraph"] = [{"text":"impl Clone for Time","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for DfsEvent&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Clone&gt; Clone for Control&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, VM:&nbsp;Clone&gt; Clone for Dfs&lt;N, VM&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, VM:&nbsp;Clone&gt; Clone for DfsPostOrder&lt;N, VM&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, VM:&nbsp;Clone&gt; Clone for Bfs&lt;N, VM&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, VM:&nbsp;Clone&gt; Clone for Topo&lt;N, VM&gt;","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;Clone, C:&nbsp;Clone&gt; Clone for WalkerIter&lt;W, C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;G:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for NodeFiltered&lt;G, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;G:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for EdgeFiltered&lt;G, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;G:&nbsp;Clone&gt; Clone for Reversed&lt;G&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone&gt; Clone for ReversedEdgeReference&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for Element&lt;N, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for Dominators&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Copy + Eq + Hash,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, VM:&nbsp;Clone&gt; Clone for DfsSpace&lt;N, VM&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone&gt; Clone for Cycle&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Clone for NegativeCycle","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, E:&nbsp;Clone, Ty, Ix:&nbsp;Clone&gt; Clone for Csr&lt;N, E, Ty, Ix&gt;","synthetic":false,"types":[]},{"text":"impl Clone for EdgesNotSorted","synthetic":false,"types":[]},{"text":"impl&lt;'a, E:&nbsp;Clone + 'a, Ty:&nbsp;Clone, Ix:&nbsp;Clone + 'a&gt; Clone for Edges&lt;'a, E, Ty, Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix:&nbsp;Copy&gt; Clone for EdgeReference&lt;'a, E, Ty, Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, Ix:&nbsp;Clone + 'a&gt; Clone for Neighbors&lt;'a, Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Ix:&nbsp;Clone&gt; Clone for NodeIndex&lt;Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Ix:&nbsp;Clone&gt; Clone for EdgeIndex&lt;Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E, Ix&gt; Clone for Node&lt;E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;E, Ix&gt; Clone for Edge&lt;E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, E, Ty, Ix:&nbsp;IndexType&gt; Clone for Graph&lt;N, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, E, Ix&gt; Clone for Neighbors&lt;'a, E, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: IndexType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, E, Ty, Ix&gt; Clone for Edges&lt;'a, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: IndexType,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: EdgeType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ix&gt; Clone for WalkNeighbors&lt;Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ix: IndexType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ix:&nbsp;Clone&gt; Clone for NodeIndices&lt;Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Ix:&nbsp;Clone&gt; Clone for EdgeIndices&lt;Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, E, Ix:&nbsp;IndexType&gt; Clone for EdgeReference&lt;'a, E, Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N, E, Ty, Ix:&nbsp;IndexType&gt; Clone for StableGraph&lt;N, E, Ty, Ix&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, E, Ix:&nbsp;IndexType&gt; Clone for EdgeReference&lt;'a, E, Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Ix:&nbsp;IndexType&gt; Clone for WalkNeighbors&lt;Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, E:&nbsp;Clone, Ty:&nbsp;Clone&gt; Clone for GraphMap&lt;N, E, Ty&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'b, T&gt; Clone for Ptr&lt;'b, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Clone, E:&nbsp;Clone, Ty:&nbsp;Clone, Null:&nbsp;Clone + Nullable&lt;Wrapped = E&gt;, Ix:&nbsp;Clone&gt; Clone for MatrixGraph&lt;N, E, Ty, Null, Ix&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Clone&gt; Clone for UnionFind&lt;K&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Direction","synthetic":false,"types":[]},{"text":"impl Clone for Directed","synthetic":false,"types":[]},{"text":"impl Clone for Undirected","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Clone for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Regex","synthetic":false,"types":[]},{"text":"impl Clone for CaptureLocations","synthetic":false,"types":[]},{"text":"impl&lt;'c, 't: 'c&gt; Clone for SubCaptureMatches&lt;'c, 't&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RegexSet","synthetic":false,"types":[]},{"text":"impl Clone for SetMatches","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SetMatchesIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RegexSet","synthetic":false,"types":[]},{"text":"impl Clone for SetMatches","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SetMatchesIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Clone for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Regex","synthetic":false,"types":[]},{"text":"impl Clone for CaptureLocations","synthetic":false,"types":[]},{"text":"impl&lt;'c, 't: 'c&gt; Clone for SubCaptureMatches&lt;'c, 't&gt;","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Clone for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Parser","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl Clone for Position","synthetic":false,"types":[]},{"text":"impl Clone for WithComments","synthetic":false,"types":[]},{"text":"impl Clone for Comment","synthetic":false,"types":[]},{"text":"impl Clone for Ast","synthetic":false,"types":[]},{"text":"impl Clone for Alternation","synthetic":false,"types":[]},{"text":"impl Clone for Concat","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for LiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for SpecialLiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for HexLiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for ClassPerl","synthetic":false,"types":[]},{"text":"impl Clone for ClassPerlKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassAscii","synthetic":false,"types":[]},{"text":"impl Clone for ClassAsciiKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicode","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeOpKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassBracketed","synthetic":false,"types":[]},{"text":"impl Clone for ClassSet","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetItem","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetRange","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetUnion","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetBinaryOp","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetBinaryOpKind","synthetic":false,"types":[]},{"text":"impl Clone for Assertion","synthetic":false,"types":[]},{"text":"impl Clone for AssertionKind","synthetic":false,"types":[]},{"text":"impl Clone for Repetition","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionOp","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for GroupKind","synthetic":false,"types":[]},{"text":"impl Clone for CaptureName","synthetic":false,"types":[]},{"text":"impl Clone for SetFlags","synthetic":false,"types":[]},{"text":"impl Clone for Flags","synthetic":false,"types":[]},{"text":"impl Clone for FlagsItem","synthetic":false,"types":[]},{"text":"impl Clone for FlagsItemKind","synthetic":false,"types":[]},{"text":"impl Clone for Flag","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Literals","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for TranslatorBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Translator","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for Hir","synthetic":false,"types":[]},{"text":"impl Clone for HirKind","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicode","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Clone for ClassBytes","synthetic":false,"types":[]},{"text":"impl Clone for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Clone for Anchor","synthetic":false,"types":[]},{"text":"impl Clone for WordBoundary","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for GroupKind","synthetic":false,"types":[]},{"text":"impl Clone for Repetition","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Clone for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Parser","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Range","synthetic":false,"types":[]}];
implementors["ryu"] = [{"text":"impl Clone for Buffer","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for UnitDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for BoolDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for IsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for UsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for F32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for F64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for CharDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for StrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for StringDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, E&gt; Clone for CowStrDeserializer&lt;'a, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for SeqDeserializer&lt;I, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for SeqAccessDeserializer&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, I, E&gt; Clone for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Pair,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I::Item as Pair&gt;::Second: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for MapAccessDeserializer&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl Clone for IgnoredAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Unexpected&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["serde_hjson"] = [{"text":"impl Clone for ErrorCode","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Clone for Category","synthetic":false,"types":[]},{"text":"impl Clone for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CompactFormatter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for PrettyFormatter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Number","synthetic":false,"types":[]}];
implementors["serde_test"] = [{"text":"impl&lt;'a&gt; Clone for Token&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Slab&lt;T&gt;","synthetic":false,"types":[]}];
implementors["textwrap"] = [{"text":"impl Clone for NoHyphenation","synthetic":false,"types":[]},{"text":"impl Clone for HyphenSplitter","synthetic":false,"types":[]},{"text":"impl&lt;'a, S:&nbsp;Clone + WordSplitter&gt; Clone for Wrapper&lt;'a, S&gt;","synthetic":false,"types":[]}];
implementors["toml"] = [{"text":"impl Clone for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V:&nbsp;Clone&gt; Clone for VecMap&lt;V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, V&gt; Clone for Iter&lt;'a, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, V&gt; Clone for Keys&lt;'a, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, V&gt; Clone for Values&lt;'a, V&gt;","synthetic":false,"types":[]}];
implementors["walkdir"] = [{"text":"impl Clone for DirEntry","synthetic":false,"types":[]}];
implementors["yaml_rust"] = [{"text":"impl Clone for EmitError","synthetic":false,"types":[]},{"text":"impl Clone for Event","synthetic":false,"types":[]},{"text":"impl Clone for TEncoding","synthetic":false,"types":[]},{"text":"impl Clone for TScalarStyle","synthetic":false,"types":[]},{"text":"impl Clone for Marker","synthetic":false,"types":[]},{"text":"impl Clone for ScanError","synthetic":false,"types":[]},{"text":"impl Clone for TokenType","synthetic":false,"types":[]},{"text":"impl Clone for Token","synthetic":false,"types":[]},{"text":"impl Clone for Yaml","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()